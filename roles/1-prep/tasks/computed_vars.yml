# get local vars from scripts in /etc/ansible/facts.d

- name: Create /etc/xsce
  file: path=/etc/xsce
        owner=root
        group=root
        mode=0755
        state=directory

# this script can be sourced to get xsce location
- name: Create xsce.env file
  template: backup=yes
            src=xsce.env.j2
            dest=/etc/xsce/xsce.env
            owner=root
            group=root
            mode=0644

- name: create ansible.d facts directory
  file: path=/etc/ansible/facts.d
        owner=root
        group=root
        mode=0750
        state=directory

- name: local facts script
  template: backup=yes
            src=local_facts.fact.j2
            dest=/etc/ansible/facts.d/local_facts.fact
            owner=root
            group=root
            mode=0700

- name: re-read facts
  setup: filter=ansible_local

# workaround for fact that auto create does not work on ini_file
- name: Create xsce config file
  file: dest='{{ xsce_config_file }}'
        state=touch        
  
- name: add version section
  ini_file: dest='{{ xsce_config_file }}'
            backup=yes
            section=version
            option='{{ item.option }}'
            value='{{ item.value }}'
  with_items:
    - option: 'xsce_branch'
      value: '{{ ansible_local["local_facts"]["xsce_branch"] }}'
    - option: 'xsce_commit'
      value: '{{ ansible_local["local_facts"]["xsce_commit"] }}'      
    - option: 'install_date'
      value: '{{ ansible_date_time["iso8601"] }}'
      
- name: Add location section to config file
  ini_file: dest='{{ xsce_config_file }}'
            section=location
            option='{{ item.option }}'
            value='{{ item.value }}'
  with_items:
    - option: 'xsce_base'
      value: '{{ xsce_base }}'      
    - option: 'xsce_dir'
      value: '{{ xsce_dir }}'  

# set top level variables from local facts for convenience
- set_fact:
     phplib_dir: '{{ ansible_local["local_facts"]["phplib_dir"] }}'

- set_fact:
     xo_model: '{{ ansible_local["local_facts"]["xo_model"] }}'

# Put all computed vars here so derive properly from any prior var file

- name: Turn on mysql if elgg or rachel enabled
  set_fact:
    mysql_enabled: True
  when: elgg_enabled or rachel_enabled

# for various reasons the mysql service can not be enabled on fedora 20,
# but 'mariadb', which is its real name can
# on fedora 18 we need to use 'mysqld'
      
- name: Set mysqld service name to mariadb by default
  set_fact:
    mysql_service: mariadb
    
- name: Set mysqld service name to mysqld for fedora 18
  set_fact:
    mysql_service: mysqld    
  when: ansible_distribution_release == "based on Fedora 18"

# Networking

# WAN
- name: Set user configured wan fact
  set_fact:
     xsce_wan_iface: {{ xsce_wan_iface }}
  when: 'xsce_wan_iface != "auto" or xsce_wan_iface == "none" '

- name: Detecting gateway
  set_fact:
     xsce_wan_iface: "{{ ansible_default_ipv4.alias }}"
  register: has_gateway
  when: {{ ansible_default_ipv4 }} and xsce_wan_iface != "none"

- name: WAN sanity check
  fail: msg=ERROR can't detect WAN gateway and using 'auto' for xsce_wan_iface
  when: xsce_wan_iface == "auto" and not has_gateway

# LAN - Order is: <nic> none auto
- name: Set user configured lan fact
  set_fact:
     xsce_lan_iface: "{{ xsce_lan_iface }}"
  when: 'xsce_lan_iface != "auto" and xsce_lan_iface != "none" '

- name: Discover LAN iface
  shell: "/sbin/ip link show  | grep -v -e DOWN -e lo -e tun -e {{ ansible_default_ipv4.alias }}| grep mtu | gawk -F: '{print $2}' |  tr -d ' '  | head -n1 "
  register: discovered_lan
  changed_when: false
  when: has_gateway

- name: Set xsce discovered lan fact
  set_fact:
     xsce_lan_iface: "{{ discovered_lan.stdout }}"
  when: 'xsce_lan_iface == "auto"  and discovered_lan.stdout  != ""'

- name: No LAN configured - Appliance mode
  set_fact:
     xsce_lan_iface: ""
  when: 'xsce_lan_iface == "none" or (discovered_lan.stdout == "" and xsce_lan_iface == "auto" )'

