- name: Checking xs_domain_name 
  shell: "cat /etc/sysconfig/xs_domain_name"
  register: prior_domain
  ignore_errors: True

# above always registers
- name: Checking for prior domain name
  set_fact:
    xsce_domain: "{{ prior_domain.stdout }}"
  when: prior_domain.stdout != "lan" and prior_domain.stdout != ""

- name: xs_wan_device
  shell: "cat /etc/sysconfig/xs_wan_device"
  register: prior_gw
  ignore_errors: True

- name: Checking for old device gateway interface for device test
  set_fact:
    device_gw: "{{ prior_gw.stdout }}"
  when: prior_gw is defined and prior_gw.stdout != ""

- name: Checking for ifcfg-WAN file
  stat: path=/etc/sysconfig/network-scripts/ifcfg-WAN
  register: has_ifcfg_WAN

- name: Setting has_WAN
  set_fact:
    has_WAN: "True"
  when: has_ifcfg_WAN.stat.exists is defined and has_ifcfg_WAN.stat.exists

# unused
# DETECT -- gateway and wireless
- name: Get a list of slaves from previous config
  shell: "egrep -rn BRIDGE=br0 /etc/sysconfig/network-scripts | gawk -F'[-:]' '{print $3}'"
  register: ifcfg_slaves
  ignore_errors: True
  changed_when: False
# 

- name: Get a list of ifcfg files to delete
  shell: "ls -1 /etc/sysconfig/network-scripts/ifcfg-* | grep -v -e ifcfg-lo  -e ifcfg-WAN"
  register: ifcfg_files
  ignore_errors: True
  changed_when: False

# Discover  do we have a gateway? -- if ansible detects gateway, becomes WAN candidate
- name: Finding gateway
  set_fact:
    discovered_wan_iface: "{{ ansible_default_ipv4.alias }}"
  when: 'ansible_default_ipv4.gateway is defined'

- name: Setting wan if detected
  set_fact:
    xsce_wan_iface: "{{ discovered_wan_iface }}"
    device_gw: "{{ discovered_wan_iface }}"
  when: discovered_wan_iface != "none" and xsce_wan_iface == "none"

# returns list of paths
- name: Find gateway config based on device
  shell: "egrep -rn {{ device_gw }} /etc/sysconfig/network-scripts/ifcfg* | gawk -F ':' '{print $1}'"
  register: ifcfg_gw_device
  ignore_errors: True
  changed_when: False
  when: device_gw != "none"

# last match wins
- name: Setting has_ifcfg_gw based on device if found
  set_fact:
    has_ifcfg_gw: "{{ item|trim }}"
  when: ifcfg_gw_device.stdout_lines is defined and item|trim != "" and item|trim != "/etc/sysconfig/network-scripts/ifcfg-LAN"
  with_items:
      - "{{ ifcfg_gw_device.stdout_lines }}"

# returns path
- name: Find active gateway config based on macaddress
  shell: "egrep -irn {{ ansible_default_ipv4.macaddress }} /etc/sysconfig/network-scripts/ifcfg* | gawk -F ':' '{print $1}' | head -n 1"  
  register: ifcfg_gw_mac
  ignore_errors: True
  changed_when: False
  when: 'ansible_default_ipv4.gateway is defined'

- name: Set has_ifcfg_gw based on on macaddress if found
  set_fact:
    has_ifcfg_gw: "{{ ifcfg_gw_mac.stdout|trim }}"
  when: ifcfg_gw_mac is defined and ifcfg_gw_mac.stdout != ""

# WIRELESS -- if any wireless is detected as gateway, it becomes WAN
- name: Look for any wireless interfaces
  shell: "cat /proc/net/wireless | grep -v -e Inter -e face | gawk -F: '{print $1}' | head -n1"
  register: wireless_list1
  ignore_errors: True
  changed_when: False

# maybe never TODO: deal with more that one wireless device last match wins
- name: Set the discovered wireless, if found
  set_fact:
     wifi1: "{{ wireless_list1.stdout|trim }}"
     discovered_wireless_iface: "{{ wireless_list1.stdout|trim }}"
  when: wireless_list1.stdout != "" and wireless_list1.stdout|trim != discovered_wan_iface

# WIRELESS -- Sigh... Not all drivers update /proc/net/wireless correctly
- name: Look for any wireless interfaces take 2
  shell: "ls -la /sys/class/net/*/phy80211 | awk -F / '{print $5}'"
  register: wireless_list2
  ignore_errors: True
  changed_when: False

- name: Set the discovered wireless, if found take 2
  set_fact:
     wifi2: "{{ wireless_list2.stdout|trim }}"
  when: wireless_list2.stdout != "" and wireless_list2.stdout|trim != discovered_wan_iface

- name: Use discovered wireless, take 2
  set_fact:
     discovered_wireless_iface: "{{ wireless_list2.stdout|trim }}"
  when: wireless_list2.stdout != "" and wireless_list2.stdout|trim != discovered_wan_iface and wireless_list1.stdout == ""

# LAN - pick non WAN's
- name: Create list of  LAN (non wan) ifaces
  shell: "/sbin/ip link show | grep -v -e wwlan -e ppp -e lo -e br0: -e tun -e {{ device_gw }} | grep mtu | gawk -F: '{print $2}' "
  register: lan_list_result
  ignore_errors: True
  changed_when: false

# Select an adapter that is not WAN and not wireless
# if there is more than one the last one wins
- name: Set xsce discovered lan fact
  set_fact:
    discovered_lan_iface: "{{ item|trim }}"
  when: item|trim != discovered_wireless_iface and item|trim != discovered_wan_iface
  with_items:
      - "{{ lan_list_result.stdout_lines }}"

- name: Count LAN ifaces
  shell: "/sbin/ip link show | grep -v  -e wwlan -e ppp -e lo -e br0: -e tun -e {{ device_gw }} | grep mtu | wc | gawk '{print $1}'"
  register: num_lan_interfaces_result
  ignore_errors: True
  changed_when: false

# facts are apparently all stored as text, so do text comparisons from here on
- name: create a simple variable from a compound one
  set_fact:
      num_lan_interfaces: "{{ num_lan_interfaces_result.stdout|int }}"

# If 2 interfaces found in gateway mode, with one wifi, declare other to be wan
#- name: In gateway mode with one wifi adapter, the other is WAN
#  set_fact:
#      xsce_wan_iface: "{{ discovered_lan_iface }}"
#      xsce_lan_iface: "{{ discovered_wireless_iface }}"
#      num_lan_interfaces: "1"
#  when: xsce_lan_enabled and xsce_wan_enabled and num_lan_interfaces == "2" and discovered_wireless_iface != "none" and xsce_wan_iface == "none"

- name: Set the variable for wireless_iface if present
  set_fact:
       xsce_wireless_lan_iface: "{{ discovered_wireless_iface }}"
  when: discovered_wireless_iface != "none" and discovered_wireless_iface != xsce_wan_iface

# use value only if present
- name: Setting detected lan
  set_fact:
    xsce_lan_iface: "{{ discovered_lan_iface }}"
  when: 'discovered_lan_iface != "none" and num_lan_interfaces == "1"'

- name: 2 or more devices on the LAN - use bridging
  set_fact:
     xsce_lan_iface: br0
  when: 'discovered_lan_iface != "none" and num_lan_interfaces >= "2"'

- name: WiFi is on the LAN - use bridging
  set_fact:
    xsce_lan_iface: br0
  when: xsce_wireless_lan_iface != "none"

- name: No LAN configured - Appliance mode
  set_fact:
    xsce_network_mode: "Appliance"
  when: xsce_lan_iface == "none" or user_lan_iface == "none" or xsce_lan_enabled == False

- name: LAN configured - LanController mode
  set_fact:
    xsce_network_mode: "LanController"
  when: xsce_lan_iface != "" and xsce_wan_iface == "none" and xsce_lan_enabled == True

- name: LAN configured - Gateway mode
  set_fact:
    xsce_network_mode: "Gateway"
  when: 'xsce_lan_iface != "none" and xsce_wan_iface != "none"'

- name: Set port 80 for Admin Console
  set_fact:
    gui_port: 80
  when: not adm_cons_force_ssl

- name: Set port 443 for Admin Console
  set_fact:
    gui_port: 443
  when: adm_cons_force_ssl

# OK try old gw this is a best guess based on what's in /etc/sysconfig/xs_wan_device's last state
# intended to provide a seed value to display in the GUI when no gateway is present but we had one.
- name: Has old gateway and no discovered gateway setting WAN
  set_fact:
    gui_wan_iface: "{{ device_gw }}"
  when: user_wan_iface == "auto" and device_gw != "none" and discovered_wan_iface == "none"

- name: Add location section to config file
  ini_file: dest='{{ xsce_config_file }}'
            section=network
            option='{{ item.option }}'
            value='{{ item.value }}'
  with_items:
  - option: 'detected_gateway'
    value: '{{ discovered_wan_iface }}'
  - option: 'prior_gateway'
    value: '{{ device_gw }}'
  - option: 'num_lan_interfaces'
    value: '{{ num_lan_interfaces }}'
  - option: 'wireless_list_1'
    value: '{{ wifi1 }}'
  - option: 'wireless_list_2'
    value: '{{ wifi2 }}'
  - option: 'discovered_wireless_iface'
    value: '{{ discovered_wireless_iface }}'
  - option: 'xsce_wireless_lan_iface'
    value: '{{ xsce_wireless_lan_iface }}'
  - option: 'detected_lan'
    value: '{{ discovered_lan_iface }}'
  - option: 'xsce_network_mode'
    value: '{{ xsce_network_mode }}'
