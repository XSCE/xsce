- include: computed_network.yml
  tags:
    - network

- name: Set hostname
  template: dest=/etc/hostname
            src=network/hostname.j2
            owner=root
            mode=0644

- name: Create xs network flags
  template: src=network/{{ item }}.j2
            dest=/etc/sysconfig/{{ item }}
            mode=0644
  with_items:
    - xs_wan_device
    - xs_lan_device
    - xs_domain_name
  tags:
    - network-discover

- name: Configure /etc/sysconfig/network
  template: src=network/sysconfig.network.j2
            dest=/etc/sysconfig/network
            owner=root
            group=root
            mode=0644

#TODO: Use vars instead of hardcoded values
- name: Configure /etc/hosts
  lineinfile: dest=/etc/hosts
              regexp='^172\.18\.96\.1'
              line='172.18.96.1            {{ xsce_hostname }}.{{ xsce_domain }}      {{ xsce_hostname }}'
              owner=root
              group=root
              mode=0644

- name: Configure /etc/hosts
  lineinfile: dest=/etc/hosts
              regexp='^127\.0\.0\.1'
              line='127.0.0.1            localhost.localdomain   localhost   {{ xsce_hostname }}'
              owner=root
              group=root
              mode=0644

##### Start static ip address info for first run #####

# supply an ifcfg if no gateway detected but wan_ip is set
# set user_wan_iface: <device> and use wan_* for static info
- name: Supply wan interface file
  template: src=network/ifcfg-WAN.j2
            dest=/etc/sysconfig/network-scripts/ifcfg-WAN
  when: 'xsce_wan_iface != "none" and wan_ip != "dhcp"'

- include: NM.yml
  when: 'ansible_distribution_version <= "20" and wan_ip != "dhcp"'

- name: Re-read network config files
  shell: 'nmcli con reload'
  ignore_errors: yes
  when: 'ansible_distribution_version >= "21" and wan_ip != "dhcp"'

- name: use upstream nameserver until named is installed
  lineinfile: dest=/etc/resolv.conf
              line='nameserver {{wan_nameserver}}'
              create=yes
              state=present
  when: 'xsce_wan_iface != "none" and wan_ip != "dhcp"'

##### End static ip address info

- include: avahi.yml
  tags:
    - network

- include: named.yml
  when: not xsce_prepped
  tags:
    - named
    - network

- include: dhcpd.yml
  when: not xsce_prepped
  tags:
    - dhcpd
    - network

- include: squid.yml
  when: not xsce_prepped
  tags:
    - squid
    - network

- include: wondershaper.yml
  when: not xsce_prepped
  tags:
    - wondershaper
    - network

- include: iptables.yml
  tags:
    - iptables
    - network

- include: enable.yml
  tags:
    - network

- name: Create gateway flag
  shell: echo 1 > /etc/sysconfig/olpc-scripts/setup.d/installed/gateway
         creates=/etc/sysconfig/olpc-scripts/setup.d/installed/gateway

- name: Disable network.service
  service: name=network
           enabled=no

- name: Mask network.service
  shell: 'systemctl mask network.service'

# Network Manager starts this if needed
- name: Disable wpa_supplicant
  service: name=wpa_supplicant
           enabled=no

- name: Mask wpa_supplicant
  shell: 'systemctl mask wpa_supplicant'

- name: Stop wpa_supplicant
  service: name=wpa_supplicant
           state=stopped
  ignore_errors: yes
  when: not installing

- name: Stop the Access Point Hostapd program
  service: name=hostapd.service
           state=stopped
  ignore_errors: yes
  when: not installing

- name: ask systemd to reread the unit files, picks up changes done
  shell: systemctl daemon-reload
  when: not installing

# Disconnects the slaves quickly, deletes the bridge
- name: Stop the LAN Bridge F21
  shell: 'nmcli con delete "Bridge LAN"'
  ignore_errors: yes
  when: ansible_distribution_version >= "21" and not installing

- name: Now delete all non-gateway ifcfg files
  shell: "rm -f {{ item }} "
  when: item|trim != discovered_wan_iface
  with_items:
    - "{{ ifcfg_files.stdout_lines }}"

# might have wifi info if wireless is used as uplink.
- name: Rename supplied gateway ifcfg file to WAN if present
  shell: "mv /etc/sysconfig/network-scripts/ifcfg-{{ ifcfg_gw.stdout }} /etc/sysconfig/network-scripts/ifcfg-WAN"
  ignore_errors: True
  when: ifcfg_gw is defined and xsce_wan_iface != "none" and ifcfg_gw.stdout != "WAN"

- name: Checking for ifcfg-WAN file
  stat: path=/etc/sysconfig/network-scripts/ifcfg-WAN
  register: needs_WAN

# set user_wan_iface: <device> for static
# use wan_* for static info
- name: Supply ifcfg-WAN file
  template: src=network/ifcfg-WAN.j2
            dest=/etc/sysconfig/network-scripts/ifcfg-WAN
  when: xsce_wan_iface != "none" and not needs_WAN.stat.exists

- name: Configuring LAN interface as xsce_lan_iface
  template: src=network/ifcfg.j2
            dest=/etc/sysconfig/network-scripts/ifcfg-LAN
  when: xsce_lan_iface != "none"

#- name: Turn off NM for WiFi LAN
#  lineinfile: state=present
#              backrefs=yes
#              regexp="NM_CONTROLLED"
#              line="NM_CONTROLLED=no"
#              dest=/etc/sysconfig/network-scripts/ifcfg-LAN
#  when: xsce_lan_iface == "{{ xsce_wireless_lan_iface }}"

# can be more than one wired interface
- name: Wired enslaving ## lan_list_result ## to Bridge
  template: src=network/ifcfg-slave.j2
            dest=/etc/sysconfig/network-scripts/ifcfg-{{ item|trim }}
  when: xsce_lan_iface == "br0" and item|trim != xsce_wireless_lan_iface and item|trim != xsce_wan_iface
  with_items:
      - "{{ lan_list_result.stdout_lines }}"

- name: WiFi enslaving {{ xsce_wireless_lan_iface }} to Bridge
  template: src=network/wifi-slave.j2
            dest=/etc/sysconfig/network-scripts/ifcfg-{{ xsce_wireless_lan_iface }}
  when: xsce_lan_iface == "br0" and xsce_wireless_lan_iface != "none"
  tags:
    - network

# monitor-connection-files defaults to no with F21, F18-F20 defaults to yes
- name: Re-read network config files
  shell: 'nmcli con reload'
  ignore_errors: yes
  when: ansible_distribution_version >= "21" and not installing

- include: restart.yml
  when: not installing
  tags:
    - network

- include: hostapd.yml
  when: not installing
  tags:
    - network
