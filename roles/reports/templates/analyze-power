#!/bin/env python
# read apache logs, sifting for records we want to save

import sys
from os import path
import os
import datetime
from pprint import pprint
import glob
import json
from dateutil.tz import *
from dateutil.parser import *

LOC='/library/reports'

def tstamp(dtime):
    '''return a UNIX style seconds since 1970 for datetime input'''
    epoch = datetime.datetime(1970, 1, 1,tzinfo=tzutc())
    newdtime = dtime.astimezone(tzutc())
    since_epoch_delta = newdtime - epoch
    return since_epoch_delta.total_seconds()

# fetch the dictionary of previous downloads if it exists
if path.isfile(path.join(LOC,"data","downloads")):
    strm = open(path.join(LOC,"data","downloads"),"r")
    downloads = json.load(strm)
else: downloads = {}
added = 0

# get the UUID of this machine
with open("/etc/xsce/uuid", "r") as infile:
    uuid=infile.read()

filedata = []
# traverse the apache logs and get the date in first record
#  The following will need to change for Fedora
for fn in glob.glob('/var/log/messages*'):
    for line in open(fn, 'r'):
        datestr = line[0:15]
        try:
            dt= parse(datestr)
        except:
            continue
        dt = dt.replace(tzinfo=tzlocal())
        timestamp = tstamp(dt)
        filedata.append( (timestamp,fn) )
        #print( line[0:14], dt.strftime("%y%m%d"))
        break
        

#pprint(filedata)
# traverse the apache logs 
started = False
for ts,fn in sorted(filedata):
    for line in open(fn, 'r'):

        datestr = line[0:15]
        try:
            dt= parse(datestr)
        except:
            continue
        dt = dt.replace(tzinfo=tzlocal())
        timestamp = tstamp(dt)
        if not started:
            last_heartbeat = timestamp
            last_powerdown_timestamp = timestamp
            last_powerup = timestamp
            started = True
        # look for a start up record in the log
        nibbles = line.split()
        #pprint(nibbles)
        if nibbles[4] != 'root:': continue
        if  nibbles[5] == 'xsce_startup':
            last_powerup = timestamp
            print timestamp, "startup. Downtime:", timestamp - last_heartbeat,line[0:14]
            """
            if last_heartbeat == last_powerdown_timestamp:
                print 'normal shutdown'
            else:
                print 'power interruption shutdown'
            """
        elif nibbles[5] == "xsce_tick":
            #print timestamp,'tick',line[0:14]
            last_heartbeat = timestamp
        elif nibbles[5] == 'xsce_shutdown' :
            
            print timestamp, 'Normal system shutdown',line[0:14],"Powered seconds: ",timestamp - last_powerup
            last_heatbeat = timestamp
            last_powerdown_timestamp = timestamp
    
# now store away the accumulated data

with open(path.join(LOC,"data","downloads"),"w") as outfile:
    json.dump(downloads, outfile)

# now create the final csv file
outfile = open(path.join(LOC,"staging","downloads_csv"),'w')

for key in sorted(downloads):
    outfile.write("%s,%s,%s,%s,\n" % (downloads[key]["time"],\
                downloads[key]["week"],\
                downloads[key]["url"], uuid.rstrip(), ))   

# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4 background=light
